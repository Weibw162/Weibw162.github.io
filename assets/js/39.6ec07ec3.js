(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{376:function(e,t,l){"use strict";l.r(t);var v=l(7),_=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("1、调整JVM大小进行性能优化，修改Kettle根目录下的Spoon脚本。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Weibw162/image-hosting@dev/Kettle/image.5rprlfvywhg0.webp",alt:"image"}})]),e._v(" "),t("p",[e._v("参数参考：")]),e._v(" "),t("p",[e._v("-Xmx2048m：设置JVM最大可用内存为2048M。")]),e._v(" "),t("p",[e._v("-Xms1024m：设置JVM促使内存为1024m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。")]),e._v(" "),t("p",[e._v("-Xmn2g：设置年轻代大小为2G。整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。")]),e._v(" "),t("p",[e._v("-Xss128k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。")]),e._v(" "),t("p",[e._v("2、 调整提交（Commit）记录数大小进行优化，Kettle默认Commit数量为：1000，可以根据数据量大小来设置Commitsize：1000~50000")]),e._v(" "),t("p",[e._v("3、尽量使用数据库连接池；")]),e._v(" "),t("p",[e._v("4、尽量提高批处理的commit size；")]),e._v(" "),t("p",[e._v("5、尽量使用缓存，缓存尽量大一些（主要是文本文件和数据流）；")]),e._v(" "),t("p",[e._v("6、Kettle是Java做的，尽量用大一点的内存参数启动Kettle；")]),e._v(" "),t("p",[e._v("7、可以使用sql来做的一些操作尽量用sql；")]),e._v(" "),t("p",[e._v("Group , merge , stream lookup,split field这些操作都是比较慢的，想办法避免他们.，能用sql就用sql；")]),e._v(" "),t("p",[e._v("8、插入大量数据的时候尽量把索引删掉；")]),e._v(" "),t("p",[e._v("9、尽量避免使用update , delete操作，尤其是update,如果可以把update变成先delete,  后insert；")]),e._v(" "),t("p",[e._v("10、能使用truncate table的时候，就不要使用deleteall row这种类似sql合理的分区，如果删除操作是基于某一个分区的，就不要使用delete row这种方式（不管是deletesql还是delete步骤）,直接把分区drop掉，再重新创建；")]),e._v(" "),t("p",[e._v("11、尽量缩小输入的数据集的大小（增量更新也是为了这个目的）；")]),e._v(" "),t("p",[e._v("12、尽量使用数据库原生的方式装载文本文件(Oracle的sqlloader, mysql的bulk loader步骤)。")])])}),[],!1,null,null,null);t.default=_.exports}}]);