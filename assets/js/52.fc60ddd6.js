(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{389:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"数据类型的优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型的优化"}},[t._v("#")]),t._v(" 数据类型的优化")]),t._v(" "),s("h3",{attrs:{id:"更小的通常更好"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更小的通常更好"}},[t._v("#")]),t._v(" 更小的通常更好")]),t._v(" "),s("p",[t._v("应该尽量使用可以正确存储数据的最小数据类型，更小的数据类型通常更快，因为它们占用更少的磁盘、内存和CPU缓存，并且处理时需要的CPU周期更少，但是要确保没有低估需要存储的值的范围，如果无法确认哪个数据类型，就选择你认为不会超过范围的最小类型")]),t._v(" "),s("p",[t._v("案例：")]),t._v(" "),s("p",[t._v("设计两张表，设计不同的数据类型，查看表的容量")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Connection")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DriverManager")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PreparedStatement")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.mysql.jdbc.Driver"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Connection")]),t._v(" conn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DriverManager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc:mysql://localhost:3306/db1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PreparedStatement")]),t._v(" pstmt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareStatement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"insert into psn2 values(?,?)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            pstmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            pstmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            pstmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addBatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        pstmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("executeBatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("h3",{attrs:{id:"简单就好"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单就好"}},[t._v("#")]),t._v(" 简单就好")]),t._v(" "),s("p",[t._v("简单数据类型的操作通常需要更少的CPU周期，例如，")]),t._v(" "),s("p",[t._v("1、整型比字符操作代价更低，因为字符集和校对规则是字符比较比整型比较更复杂，")]),t._v(" "),s("p",[t._v("2、使用mysql自建类型而不是字符串来存储日期和时间")]),t._v(" "),s("p",[t._v("3、用整型存储IP地址")]),t._v(" "),s("p",[t._v("案例：")]),t._v(" "),s("p",[t._v("创建两张相同的表，改变日期的数据类型，查看SQL语句执行的速度")]),t._v(" "),s("h3",{attrs:{id:"尽量避免null"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#尽量避免null"}},[t._v("#")]),t._v(" 尽量避免null")]),t._v(" "),s("p",[t._v("如果查询中包含可为NULL的列，对mysql来说很难优化，因为可为null的列使得索引、索引统计和值比较都更加复杂，坦白来说，通常情况下null的列改为not null带来的性能提升比较小，所有没有必要将所有的表的schema进行修改，但是应该尽量避免设计成可为null的列")]),t._v(" "),s("h3",{attrs:{id:"实际细则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际细则"}},[t._v("#")]),t._v(" 实际细则")]),t._v(" "),s("h4",{attrs:{id:"整数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数类型"}},[t._v("#")]),t._v(" 整数类型")]),t._v(" "),s("p",[t._v("可以使用的几种整数类型：TINYINT，SMALLINT，MEDIUMINT，INT，BIGINT分别使用8，16，24，32，64位存储空间。")]),t._v(" "),s("p",[t._v("尽量使用满足需求的最小数据类型")]),t._v(" "),s("h4",{attrs:{id:"字符和字符串类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符和字符串类型"}},[t._v("#")]),t._v(" 字符和字符串类型")]),t._v(" "),s("p",[t._v("1、char长度固定，即每条数据占用等长字节空间；最大长度是255个字符，适合用在身份证号、手机号等定长字符串")]),t._v(" "),s("p",[t._v("2、varchar可变程度，可以设置最大长度；最大空间是65535个字节，适合用在长度可变的属性")]),t._v(" "),s("p",[t._v("3、text不设置长度，当不知道属性的最大长度时，适合用text")]),t._v(" "),s("p",[t._v("按照查询速度：char>varchar>text")]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("varchar根据实际内容长度保存数据")]),t._v(" "),s("p",[t._v("1、使用最小的符合需求的长度。")]),t._v(" "),s("p",[t._v("2、varchar(n) n小于等于255使用额外一个字节保存长度，n>255使用额外两个字节保存长度。")]),t._v(" "),s("p",[t._v("3、varchar(5)与varchar(255)保存同样的内容，硬盘存储空间相同，但内存空间占用不同，是指定的大小 。")]),t._v(" "),s("p",[t._v("4、varchar在mysql5.6之前变更长度，或者从255一下变更到255以上时时，都会导致锁表。")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("应用场景")]),t._v(" "),s("p",[t._v("1、存储长度波动较大的数据，如：文章，有的会很短有的会很长")]),t._v(" "),s("p",[t._v("2、字符串很少更新的场景，每次更新后都会重算并使用额外存储空间保存长度")]),t._v(" "),s("p",[t._v("3、适合保存多字节字符，如：汉字，特殊字符等")])]),t._v(" "),s("h4",{attrs:{id:"blob和text类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blob和text类型"}},[t._v("#")]),t._v(" BLOB和TEXT类型")]),t._v(" "),s("p",[t._v("MySQL 把每个 BLOB 和 TEXT 值当作一个独立的对象处理。")]),t._v(" "),s("p",[t._v("两者都是为了存储很大数据而设计的字符串类型，分别采用二进制和字符方式存储。")]),t._v(" "),s("h4",{attrs:{id:"datetime和timestamp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#datetime和timestamp"}},[t._v("#")]),t._v(" datetime和timestamp")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("1、不要使用字符串类型来存储日期时间数据")]),t._v(" "),s("p",[t._v("2、日期时间类型通常比字符串占用的存储空间小")]),t._v(" "),s("p",[t._v("3、日期时间类型在进行查找过滤时可以利用日期来进行比对")]),t._v(" "),s("p",[t._v("4、日期时间类型还有着丰富的处理函数，可以方便的对时间类型进行日期计算")]),t._v(" "),s("p",[t._v("5、使用int存储日期时间不如使用timestamp类型")])]),t._v(" "),s("p",[s("strong",[t._v("datetime")])]),t._v(" "),s("ul",[s("li",[t._v("占用8个字节")]),t._v(" "),s("li",[t._v("与时区无关，数据库底层时区配置，对datetime无效")]),t._v(" "),s("li",[t._v("可保存到毫秒")]),t._v(" "),s("li",[t._v("可保存时间范围大")]),t._v(" "),s("li",[t._v("不要使用字符串存储日期类型，占用空间大，损失日期类型函数的便捷性")])]),t._v(" "),s("p",[s("strong",[t._v("timestamp")])]),t._v(" "),s("ul",[s("li",[t._v("占用4个字节")]),t._v(" "),s("li",[t._v("时间范围：1970-01-01到2038-01-19")]),t._v(" "),s("li",[t._v("精确到秒")]),t._v(" "),s("li",[t._v("采用整形存储")]),t._v(" "),s("li",[t._v("依赖数据库设置的时区")]),t._v(" "),s("li",[t._v("自动更新timestamp列的值")])]),t._v(" "),s("p",[s("strong",[t._v("date")])]),t._v(" "),s("ul",[s("li",[t._v("占用的字节数比使用字符串、datetime、int存储要少，使用date类型只需要3个字节")]),t._v(" "),s("li",[t._v("使用date类型还可以利用日期时间函数进行日期之间的计算")]),t._v(" "),s("li",[t._v("date类型用于保存1000-01-01到9999-12-31之间的日期")])]),t._v(" "),s("h4",{attrs:{id:"使用枚举代替字符串类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用枚举代替字符串类型"}},[t._v("#")]),t._v(" 使用枚举代替字符串类型")]),t._v(" "),s("p",[t._v("有时可以使用枚举类代替常用的字符串类型，mysql存储枚举类型会非常紧凑，会根据列表值的数据压缩到一个或两个字节中，mysql在内部会将每个值在列表中的位置保存为整数，并且在表的.frm文件中保存“数字-字符串”映射关系的查找表")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" enum_test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fish'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apple'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" enum_test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fish'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apple'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" enum_test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"特殊类型数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊类型数据"}},[t._v("#")]),t._v(" 特殊类型数据")]),t._v(" "),s("p",[t._v("人们经常使用varchar(15)来存储ip地址，然而，它的本质是32位无符号整数不是字符串，可以使用INET_ATON()和INET_NTOA函数在这两种表示方法之间转换")]),t._v(" "),s("p",[t._v("案例：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" inet_aton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1.1.1.1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" inet_ntoa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16843009")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"合理使用范式和反范式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合理使用范式和反范式"}},[t._v("#")]),t._v(" 合理使用范式和反范式")]),t._v(" "),s("h3",{attrs:{id:"范式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#范式"}},[t._v("#")]),t._v(" 范式")]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("范式")]),t._v(" "),s("p",[t._v("优点:")]),t._v(" "),s("ul",[s("li",[t._v("范式化的更新通常比反范式要快")]),t._v(" "),s("li",[t._v("当数据较好的范式化后，很少或者没有重复的数据")]),t._v(" "),s("li",[t._v("范式化的数据比较小，可以放在内存中，操作比较快")])]),t._v(" "),s("p",[t._v("缺点:")]),t._v(" "),s("ul",[s("li",[t._v("通常需要进行关联")])])]),t._v(" "),s("h3",{attrs:{id:"反范式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反范式"}},[t._v("#")]),t._v(" 反范式")]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("反范式")]),t._v(" "),s("p",[t._v("优点:")]),t._v(" "),s("ul",[s("li",[t._v("所有的数据都在同一张表中，可以避免关联")]),t._v(" "),s("li",[t._v("可以设计有效的索引")])]),t._v(" "),s("p",[t._v("缺点：")]),t._v(" "),s("ul",[s("li",[t._v("表格内的冗余较多，删除数据时候会造成表有些有用的信息丢失")])])]),t._v(" "),s("h3",{attrs:{id:"注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),s("p",[t._v("在企业中很少能做到严格意义上的范式或者反范式，一般需要混合使用")]),t._v(" "),s("p",[t._v("在一个网站实例中，这个网站，允许用户发送消息，并且一些用户是付费用户。现在想查看付费用户最近的10条信息。  在user表和message表中都存储用户类型(account_type)而不用完全的反范式化。这避免了完全反范式化的插入和删除问题，因为即使没有消息的时候也绝不会丢失用户的信息。这样也不会把user_message表搞得太大，有利于高效地获取数据。")]),t._v(" "),s("p",[t._v("另一个从父表冗余一些数据到子表的理由是排序的需要。")]),t._v(" "),s("p",[t._v("缓存衍生值也是有用的。如果需要显示每个用户发了多少消息（类似论坛的），可以每次执行一个昂贵的自查询来计算并显示它；也可以在user表中建一个num_messages列，每当用户发新消息时更新这个值。")]),t._v(" "),s("h3",{attrs:{id:"案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),s("h4",{attrs:{id:"范式设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#范式设计"}},[t._v("#")]),t._v(" 范式设计")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Weibw162/image-hosting@dev/20211227/image.9idin5kggg0.webp",alt:"image"}})]),t._v(" "),s("h4",{attrs:{id:"反范式设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反范式设计"}},[t._v("#")]),t._v(" 反范式设计")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Weibw162/image-hosting@dev/MySQL%E8%B0%83%E4%BC%98/image.6wrm23fam0c0.webp",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"主键的选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主键的选择"}},[t._v("#")]),t._v(" 主键的选择")]),t._v(" "),s("p",[s("strong",[t._v("代理主键")])]),t._v(" "),s("p",[t._v("与业务无关的，无意义的数字序列")]),t._v(" "),s("p",[s("strong",[t._v("自然主键")])]),t._v(" "),s("p",[t._v("事物属性中的自然唯一标识")]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("推荐使用代理主键")]),t._v(" "),s("p",[t._v("1、它们不与业务耦合，因此更容易维护")]),t._v(" "),s("p",[t._v("2、一个大多数表，最好是全部表，通用的键策略能够减少需要编写的源码数量，减少系统的总体拥有成本")])]),t._v(" "),s("h2",{attrs:{id:"字符集的选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符集的选择"}},[t._v("#")]),t._v(" 字符集的选择")]),t._v(" "),s("p",[t._v("字符集直接决定了数据在MySQL中的存储编码方式，由于同样的内容使用不同字符集表示所占用的空间大小会有较大的差异，所以通过使用合适的字符集，可以帮助我们尽可能减少数据量，进而减少IO操作次数。")]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),s("p",[t._v("1.纯拉丁字符能表示的内容，没必要选择 latin1 之外的其他字符编码，因为这会节省大量的存储空间。")]),t._v(" "),s("p",[t._v("2.如果我们可以确定不需要存放多种语言，就没必要非得使用UTF8或者其他UNICODE字符类型，这回造成大量的存储空间浪费。")]),t._v(" "),s("p",[t._v("3.MySQL的数据类型可以精确到字段，所以当我们需要大型数据库中存放多字节数据的时候，可以通过对不同表不同字段使用不同的数据类型来较大程度减小数据存储量，进而降低 IO 操作次数并提高缓存命中率。")])]),t._v(" "),s("h2",{attrs:{id:"存储引擎的选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎的选择"}},[t._v("#")]),t._v(" 存储引擎的选择")]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("存储引擎的对比")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Weibw162/image-hosting@dev/MySQL%E8%B0%83%E4%BC%98/image.4fhcqhphu6w0.webp",alt:"image"}})])]),t._v(" "),s("h2",{attrs:{id:"适当的数据冗余"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适当的数据冗余"}},[t._v("#")]),t._v(" 适当的数据冗余")]),t._v(" "),s("p",[t._v("1.被频繁引用且只能通过 Join 2张(或者更多)大表的方式才能得到的独立小字段。")]),t._v(" "),s("p",[t._v("2.这样的场景由于每次Join仅仅只是为了取得某个小字段的值，Join到的记录又大，会造成大量不必要的 IO，完全可以通过空间换取时间的方式来优化。不过，冗余的同时需要确保数据的一致性不会遭到破坏，确保更新的同时冗余字段也被更新。")]),t._v(" "),s("h2",{attrs:{id:"适当拆分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适当拆分"}},[t._v("#")]),t._v(" 适当拆分")]),t._v(" "),s("p",[t._v("当我们的表中存在类似于 TEXT 或者是很大的 VARCHAR类型的大字段的时候，如果我们大部分访问这张表的时候都不需要这个字段，我们就该义无反顾的将其拆分到另外的独立表中，以减少常用数据所占用的存储空间。这样做的一个明显好处就是每个数据块中可以存储的数据条数可以大大增加，既减少物理 IO 次数，也能大大提高内存中的缓存命中率。")])])}),[],!1,null,null,null);s.default=e.exports}}]);