(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{392:function(s,t,a){"use strict";a.r(t);var r=a(7),e=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"查询慢的原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询慢的原因"}},[s._v("#")]),s._v(" 查询慢的原因")]),s._v(" "),t("ul",[t("li",[s._v("网络")]),s._v(" "),t("li",[s._v("CPU")]),s._v(" "),t("li",[s._v("IO")]),s._v(" "),t("li",[s._v("上下文切换")]),s._v(" "),t("li",[s._v("系统调用")]),s._v(" "),t("li",[s._v("生成统计信息")]),s._v(" "),t("li",[s._v("锁等待时间")])]),s._v(" "),t("h2",{attrs:{id:"优化数据访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化数据访问"}},[s._v("#")]),s._v(" 优化数据访问")]),s._v(" "),t("h3",{attrs:{id:"查询性能低下的主要原因是访问的数据太多-某些查询不可避免的需要筛选大量的数据-我们可以通过减少访问数据量的方式进行优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询性能低下的主要原因是访问的数据太多-某些查询不可避免的需要筛选大量的数据-我们可以通过减少访问数据量的方式进行优化"}},[s._v("#")]),s._v(" 查询性能低下的主要原因是访问的数据太多，某些查询不可避免的需要筛选大量的数据，我们可以通过减少访问数据量的方式进行优化")]),s._v(" "),t("ul",[t("li",[s._v("确认应用程序是否在检索大量超过需要的数据")]),s._v(" "),t("li",[s._v("确认mysql服务器层是否在分析大量超过需要的数据行")])]),s._v(" "),t("h3",{attrs:{id:"是否向数据库请求了不需要的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#是否向数据库请求了不需要的数据"}},[s._v("#")]),s._v(" 是否向数据库请求了不需要的数据")]),s._v(" "),t("h4",{attrs:{id:"查询不需要的记录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询不需要的记录"}},[s._v("#")]),s._v(" 查询不需要的记录")]),s._v(" "),t("p",[s._v("我们常常会误以为mysql会只返回需要的数据，实际上mysql却是先返回全部结果再进行计算，在日常的开发习惯中，经常是先用select语句查询大量的结果，然后获取前面的N行后关闭结果集。")]),s._v(" "),t("p",[t("code",[s._v("优化方式是在查询后面添加limit")])]),s._v(" "),t("h4",{attrs:{id:"多表关联时返回全部列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多表关联时返回全部列"}},[s._v("#")]),s._v(" 多表关联时返回全部列")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" film_actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("title"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Academy Dinosaur'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"总是取出全部列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总是取出全部列"}},[s._v("#")]),s._v(" 总是取出全部列")]),s._v(" "),t("p",[s._v("在公司的企业需求中，禁止使用select *,虽然这种方式能够简化开发，但是会影响查询的性能，所以尽量不要使用")]),s._v(" "),t("h4",{attrs:{id:"重复查询相同的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重复查询相同的数据"}},[s._v("#")]),s._v(" 重复查询相同的数据")]),s._v(" "),t("p",[s._v("如果需要不断的重复执行相同的查询，且每次返回完全相同的数据，因此，基于这样的应用场景，我们可以将这部分数据缓存起来，这样的话能够提高查询效率")]),s._v(" "),t("h2",{attrs:{id:"执行过程的优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行过程的优化"}},[s._v("#")]),s._v(" 执行过程的优化")]),s._v(" "),t("h3",{attrs:{id:"查询缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询缓存"}},[s._v("#")]),s._v(" 查询缓存")]),s._v(" "),t("p",[s._v("在解析一个查询语句之前，如果查询缓存是打开的，那么mysql会优先检查这个查询是否命中查询缓存中的数据，如果查询恰好命中了查询缓存，那么会在返回结果之前会检查用户权限，如果权限没有问题，那么mysql会跳过所有的阶段，就直接从缓存中拿到结果并返回给客户端")]),s._v(" "),t("h3",{attrs:{id:"查询优化处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询优化处理"}},[s._v("#")]),s._v(" 查询优化处理")]),s._v(" "),t("h4",{attrs:{id:"语法解析器和预处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法解析器和预处理"}},[s._v("#")]),s._v(" 语法解析器和预处理")]),s._v(" "),t("p",[s._v("mysql通过关键字将SQL语句进行解析，并生成一颗解析树，mysql解析器将使用mysql语法规则验证和解析查询，例如验证使用使用了错误的关键字或者顺序是否正确等等，预处理器会进一步检查解析树是否合法，例如表名和列名是否存在，是否有歧义，还会验证权限等等")]),s._v(" "),t("h4",{attrs:{id:"查询优化器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询优化器"}},[s._v("#")]),s._v(" 查询优化器")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film_actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'last_query_cost'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("可以看到这条查询语句大概需要做1104个数据页才能找到对应的数据，这是经过一系列的统计信息计算来的")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("每个表或者索引的页面个数")])]),s._v(" "),t("li",[t("strong",[s._v("索引的基数")])]),s._v(" "),t("li",[t("strong",[s._v("索引和数据行的长度")])]),s._v(" "),t("li",[t("strong",[s._v("索引的分布情况")])])]),s._v(" "),t("p",[s._v("在很多情况下mysql会选择错误的执行计划，原因如下：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("统计信息不准确")])]),s._v(" "),t("p",[s._v("InnoDB因为其mvcc的架构，并不能维护一个数据表的行数的精确统计信息")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("执行计划的成本估算不等同于实际执行的成本")])]),s._v(" "),t("p",[s._v("有时候某个执行计划虽然需要读取更多的页面，但是他的成本却更小，因为如果这些页面都是顺序读或者这些页面都已经在内存中的话，那么它的访问成本将很小，mysql层面并不知道哪些页面在内存中，哪些在磁盘，所以查询之际执行过程中到底需要多少次IO是无法得知的")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("mysql的最优可能跟你想的不一样")])]),s._v(" "),t("p",[s._v("mysql的优化是基于成本模型的优化，但是有可能不是最快的优化")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("mysql不考虑其他并发执行的查询")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("mysql不会考虑不受其控制的操作成本")])]),s._v(" "),t("p",[s._v("执行存储过程或者用户自定义函数的成本")])])]),s._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[s._v("优化器的优化策略")]),s._v(" "),t("p",[t("strong",[s._v("静态优化")]),s._v("：直接对解析树进行分析，并完成优化")]),s._v(" "),t("p",[t("strong",[s._v("动态优化")]),s._v("：动态优化与查询的上下文有关，也可能跟取值、索引对应的行数有关")]),s._v(" "),t("p",[s._v("mysql对查询的静态优化只需要一次，但对动态优化在每次执行时都需要重新评估")])]),s._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[s._v("优化器的优化类型")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("重新定义关联表的顺序")])]),s._v(" "),t("p",[s._v("数据表的关联并不总是按照在查询中指定的顺序进行，决定关联顺序时优化器很重要的功能")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("将外连接转化成内连接，内连接的效率要高于外连接")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("使用等价变换规则，mysql可以使用一些等价变化来简化并规划表达式")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("优化count(),min(),max()")])]),s._v(" "),t("p",[s._v("索引和列是否可以为空通常可以帮助mysql优化这类表达式：例如，要找到某一列的最小值，只需要查询索引的最左端的记录即可，不需要全文扫描比较")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("预估并转化为常数表达式，当mysql检测到一个表达式可以转化为常数的时候，就会一直把该表达式作为常数进行处理")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("film_actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("actor_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" film_actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("索引覆盖扫描，当索引中的列包含所有查询中需要使用的列的时候，可以使用覆盖索引")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("子查询优化")])]),s._v(" "),t("p",[s._v("mysql在某些情况下可以将子查询转换一种效率更高的形式，从而减少多个查询多次对数据进行访问，例如将经常查询的数据放入到缓存中")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("等值传播")])]),s._v(" "),t("p",[s._v("如果两个列的值通过等式关联，那么mysql能够把其中一个列的where条件传递到另一个上：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" film_actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里使用film_id字段进行等值关联，film_id这个列不仅适用于film表而且适用于film_actor表")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" film_actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" film_actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])])]),s._v(" "),t("h5",{attrs:{id:"关联查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关联查询"}},[s._v("#")]),s._v(" 关联查询")]),s._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[s._v("join的实现方式原理")]),s._v(" "),t("p",[t("strong",[s._v("Simple Nested-Loop Join")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Weibw162/image-hosting@dev/MySQL%E8%B0%83%E4%BC%98/image.1xpv39646a5c.webp",alt:"image"}})]),s._v(" "),t("p",[t("strong",[s._v("Index Nested-Loop Join")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Weibw162/image-hosting@dev/MySQL%E8%B0%83%E4%BC%98/image.6qwlr9ewodk0.webp",alt:"image"}})]),s._v(" "),t("p",[t("strong",[s._v("Block Nested-Loop Join")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Weibw162/image-hosting@dev/MySQL%E8%B0%83%E4%BC%98/image.3n375u5gaqw0.webp",alt:"image"}})]),s._v(" "),t("p",[s._v("（1）Join Buffer会缓存所有参与查询的列而不是只有Join的列。\n（2）可以通过调整join_buffer_size缓存大小\n（3）join_buffer_size的默认值是256K，join_buffer_size的最大值在MySQL 5.1.22版本前是4G-1，而之后的版本才能在64位操作系统下申请大于4G的Join Buffer空间。\n（4）使用Block Nested-Loop Join算法需要开启优化器管理配置的optimizer_switch的设置block_nested_loop为on，默认为开启。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%optimizer_switch%'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("p",[t("strong",[s._v("案例演示")])]),s._v(" "),t("p",[s._v("查看不同的顺序执行方式对查询性能的影响：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("title"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("release_year"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" film_actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("查看执行的成本：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'last_query_cost'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("按照自己预想的规定顺序执行：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" straight_join film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("title"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("release_year"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" film_actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("查看执行的成本：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'last_query_cost'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"排序优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#排序优化"}},[s._v("#")]),s._v(" 排序优化")]),s._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[s._v("排序的算法")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("两次传输排序")])]),s._v(" "),t("p",[s._v("第一次数据读取是将需要排序的字段读取出来，然后进行排序，第二次是将排好序的结果按照需要去读取数据行。")]),s._v(" "),t("p",[s._v("这种方式效率比较低，原因是第二次读取数据的时候因为已经排好序，需要去读取所有记录而此时更多的是随机IO，读取数据成本会比较高")]),s._v(" "),t("p",[s._v("两次传输的优势，在排序的时候存储尽可能少的数据，让排序缓冲区可以尽可能多的容纳行数来进行排序操作")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("单次传输排序")])]),s._v(" "),t("p",[s._v("先读取查询所需要的所有列，然后再根据给定列进行排序，最后直接返回排序结果，此方式只需要一次顺序IO读取所有的数据，而无须任何的随机IO，问题在于查询的列特别多的时候，会占用大量的存储空间，无法存储大量的数据")])])]),s._v(" "),t("p",[s._v("当需要排序的列的总大小超过max_length_for_sort_data定义的字节，mysql会选择双次排序，反之使用单次排序，当然，用户可以设置此参数的值来选择排序的方式")])]),s._v(" "),t("h2",{attrs:{id:"优化特定类型的查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化特定类型的查询"}},[s._v("#")]),s._v(" 优化特定类型的查询")]),s._v(" "),t("h3",{attrs:{id:"优化count-查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化count-查询"}},[s._v("#")]),s._v(" 优化count()查询")]),s._v(" "),t("p",[s._v("count()是特殊的函数，有两种不同的作用，一种是某个列值的数量，也可以统计行数")]),s._v(" "),t("p",[s._v("总有人认为myisam的count函数比较快，这是有前提条件的，只有没有任何where条件的count(*)才是比较快的")]),s._v(" "),t("p",[t("strong",[s._v("使用近似值")])]),s._v(" "),t("p",[s._v("在某些应用场景中，不需要完全精确的值，可以参考使用近似值来代替，比如可以使用explain来获取近似的值")]),s._v(" "),t("p",[s._v("其实在很多OLAP的应用中，需要计算某一个列值的基数，有一个计算近似值的算法叫hyperloglog。")]),s._v(" "),t("p",[t("strong",[s._v("更复杂的优化")])]),s._v(" "),t("p",[s._v("一般情况下，count()需要扫描大量的行才能获取精确的数据，其实很难优化，在实际操作的时候可以考虑使用索引覆盖扫描，或者增加汇总表，或者增加外部缓存系统。")]),s._v(" "),t("h3",{attrs:{id:"优化关联查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化关联查询"}},[s._v("#")]),s._v(" 优化关联查询")]),s._v(" "),t("h4",{attrs:{id:"确保on或者using子句中的列上有索引-在创建索引的时候就要考虑到关联的顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#确保on或者using子句中的列上有索引-在创建索引的时候就要考虑到关联的顺序"}},[s._v("#")]),s._v(" 确保on或者using子句中的列上有索引，在创建索引的时候就要考虑到关联的顺序")]),s._v(" "),t("p",[s._v("当表A和表B使用列C关联的时候，如果优化器的关联顺序是B、A，那么就不需要再B表的对应列上建上索引，没有用到的索引只会带来额外的负担，一般情况下来说，只需要在关联顺序中的第二个表的相应列上创建索引")]),s._v(" "),t("h4",{attrs:{id:"确保任何的groupby和order-by中的表达式只涉及到一个表中的列-这样mysql才有可能使用索引来优化这个过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#确保任何的groupby和order-by中的表达式只涉及到一个表中的列-这样mysql才有可能使用索引来优化这个过程"}},[s._v("#")]),s._v(" 确保任何的groupby和order by中的表达式只涉及到一个表中的列，这样mysql才有可能使用索引来优化这个过程")]),s._v(" "),t("h3",{attrs:{id:"优化子查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化子查询"}},[s._v("#")]),s._v(" 优化子查询")]),s._v(" "),t("p",[s._v("子查询的优化最重要的优化建议是尽可能使用关联查询代替")]),s._v(" "),t("h3",{attrs:{id:"优化limit分页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化limit分页"}},[s._v("#")]),s._v(" 优化limit分页")]),s._v(" "),t("p",[s._v("在很多应用场景中我们需要将数据进行分页，一般会使用limit加上偏移量的方法实现，同时加上合适的orderby 的子句，如果这种方式有索引的帮助，效率通常不错，否则的化需要进行大量的文件排序操作，还有一种情况，当偏移量非常大的时候，前面的大部分数据都会被抛弃，这样的代价太高。")]),s._v(" "),t("p",[s._v("要优化这种查询的话，要么是在页面中限制分页的数量，要么优化大偏移量的性能")]),s._v(" "),t("p",[t("code",[s._v("优化此类查询的最简单的办法就是尽可能地使用覆盖索引，而不是查询所有的列")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("description "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" title "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("查看执行计划查看扫描的行数")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" title "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" lim "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"优化union查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化union查询"}},[s._v("#")]),s._v(" 优化union查询")]),s._v(" "),t("p",[s._v("mysql总是通过创建并填充临时表的方式来执行union查询，因此很多优化策略在union查询中都没法很好的使用。经常需要手工的将where、limit、order by等子句下推到各个子查询中，以便优化器可以充分利用这些条件进行优化")]),s._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[s._v("笔记")]),s._v(" "),t("p",[s._v("除非确实需要服务器消除重复的行，否则一定要使用union all，因此没有all关键字，mysql会在查询的时候给临时表加上distinct的关键字，这个操作的代价很高")])]),s._v(" "),t("h3",{attrs:{id:"推荐使用用户自定义变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推荐使用用户自定义变量"}},[s._v("#")]),s._v(" 推荐使用用户自定义变量")]),s._v(" "),t("p",[s._v("用户自定义变量是一个容易被遗忘的mysql特性，但是如果能够用好，在某些场景下可以写出非常高效的查询语句，在查询中混合使用过程化和关系话逻辑的时候，自定义变量会非常有用。")]),s._v(" "),t("p",[s._v("用户自定义变量是一个用来存储内容的临时容器，在连接mysql的整个过程中都存在。")]),s._v(" "),t("h4",{attrs:{id:"自定义变量的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义变量的使用"}},[s._v("#")]),s._v(" 自定义变量的使用")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@one")]),s._v(" :"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@min_actor")]),s._v(" :"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@last_week")]),s._v(" :"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("current_date")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" week"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[s._v("自定义变量的限制")]),s._v(" "),t("p",[s._v("1、无法使用查询缓存")]),s._v(" "),t("p",[s._v("2、不能在使用常量或者标识符的地方使用自定义变量，例如表名、列名或者limit子句")]),s._v(" "),t("p",[s._v("3、用户自定义变量的生命周期是在一个连接中有效，所以不能用它们来做连接间的通信")]),s._v(" "),t("p",[s._v("4、不能显式地声明自定义变量地类型")]),s._v(" "),t("p",[s._v("5、mysql优化器在某些场景下可能会将这些变量优化掉，这可能导致代码不按预想地方式运行")]),s._v(" "),t("p",[s._v("6、赋值符号：=的优先级非常低，所以在使用赋值表达式的时候应该明确的使用括号")]),s._v(" "),t("p",[s._v("7、使用未定义变量不会产生任何语法错误")])]),s._v(" "),t("h4",{attrs:{id:"自定义变量的使用案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义变量的使用案例"}},[s._v("#")]),s._v(" 自定义变量的使用案例")]),s._v(" "),t("h5",{attrs:{id:"优化排名语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化排名语句"}},[s._v("#")]),s._v(" 优化排名语句")]),s._v(" "),t("p",[t("strong",[s._v("1、在给一个变量赋值的同时使用这个变量")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" rownum "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("2、查询获取演过最多电影的前10名演员，然后根据出演电影次数做一个排名")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" cnt "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film_actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" actor_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" cnt "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"避免重新查询刚刚更新的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#避免重新查询刚刚更新的数据"}},[s._v("#")]),s._v(" 避免重新查询刚刚更新的数据")]),s._v(" "),t("p",[s._v("当需要高效的更新一条记录的时间戳，同时希望查询当前记录中存放的时间戳是什么")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v("  lastUpdated"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" lastUpdated "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" lastupdated "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@now")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@now")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h5",{attrs:{id:"确定取值的顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#确定取值的顺序"}},[s._v("#")]),s._v(" 确定取值的顺序")]),s._v(" "),t("p",[s._v("在赋值和读取变量的时候可能是在查询的不同阶段")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" cnt "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 因为where和select在查询的不同阶段执行，所以看到查询到两条记录，这不符合预期")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" cnt "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" first_name\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 当引入了order by之后，发现打印出了全部结果，这是因为order by引入了文件排序，而where条件是在文件排序操作之前取值的  ")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 解决这个问题的关键在于让变量的赋值和取值发生在执行查询的同一阶段：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" cnt "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);